"use strict";(self.webpackChunkkakarot=self.webpackChunkkakarot||[]).push([[776],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),o=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=o(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=o(n),h=a,m=p["".concat(c,".").concat(h)]||p[h]||u[h]||l;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var o=2;o<l;o++)i[o]=n[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1753:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var r=n(7462),a=(n(7294),n(3905));const l={},i="Library",s={unversionedId:"Kakarot/library",id:"Kakarot/library",title:"Library",description:"Internal",source:"@site/docs/Kakarot/library.md",sourceDirName:"Kakarot",slug:"/Kakarot/library",permalink:"/docs/Kakarot/library",draft:!1,editUrl:"https://github.com/sayajin-labs/kakarot/docs/Kakarot/library.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Execution context",permalink:"/docs/Kakarot/execution_context"},next:{title:"Memory",permalink:"/docs/Kakarot/memory"}},c={},o=[{value:"Internal",id:"internal",level:2},{value:"<code>constructor</code>",id:"constructor",level:3},{value:"Implicit arguments",id:"implicit-arguments",level:4},{value:"Explicit arguments",id:"explicit-arguments",level:4},{value:"<code>execute</code>",id:"execute",level:3},{value:"Implicit arguments",id:"implicit-arguments-1",level:4},{value:"Explicit arguments",id:"explicit-arguments-1",level:4},{value:"Returns",id:"returns",level:4},{value:"<code>set_blockhash_registry</code>",id:"set_blockhash_registry",level:3},{value:"Implicit arguments",id:"implicit-arguments-2",level:4},{value:"Explicit arguments",id:"explicit-arguments-2",level:4},{value:"<code>get_blockhash_registry</code>",id:"get_blockhash_registry",level:3},{value:"Implicit arguments",id:"implicit-arguments-3",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<code>set_native_token</code>",id:"set_native_token",level:3},{value:"Implicit arguments",id:"implicit-arguments-4",level:4},{value:"Explicit arguments",id:"explicit-arguments-3",level:4},{value:"<code>get_native_token</code>",id:"get_native_token",level:3},{value:"Implicit arguments",id:"implicit-arguments-5",level:4},{value:"Returns",id:"returns-2",level:4},{value:"<code>transfer</code>",id:"transfer",level:3},{value:"Implicit arguments",id:"implicit-arguments-6",level:4},{value:"Explicit arguments",id:"explicit-arguments-4",level:4},{value:"Returns",id:"returns-3",level:4},{value:"<code>deploy_contract_account</code>",id:"deploy_contract_account",level:3},{value:"Implicit arguments",id:"implicit-arguments-7",level:4},{value:"Explicit arguments",id:"explicit-arguments-5",level:4},{value:"Returns",id:"returns-4",level:4},{value:"<code>deploy_externally_owned_account</code>",id:"deploy_externally_owned_account",level:3},{value:"Implicit arguments",id:"implicit-arguments-8",level:4},{value:"Explicit arguments",id:"explicit-arguments-6",level:4},{value:"Returns",id:"returns-5",level:4},{value:"<code>eth_call</code>",id:"eth_call",level:3},{value:"Implicit arguments",id:"implicit-arguments-9",level:4},{value:"Explicit arguments",id:"explicit-arguments-7",level:4},{value:"Returns",id:"returns-6",level:4},{value:"<code>assert_caller_is_kakarot_account</code>",id:"assert_caller_is_kakarot_account",level:3},{value:"Implicit arguments",id:"implicit-arguments-10",level:4},{value:"<code>eth_send_transaction</code>",id:"eth_send_transaction",level:3},{value:"Implicit arguments",id:"implicit-arguments-11",level:4},{value:"Explicit arguments",id:"explicit-arguments-8",level:4},{value:"Returns",id:"returns-7",level:4}],d={toc:o};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"library"},"Library"),(0,a.kt)("h2",{id:"internal"},"Internal"),(0,a.kt)("h3",{id:"constructor"},(0,a.kt)("inlineCode",{parentName:"h3"},"constructor")),(0,a.kt)("p",null,"The constructor of the contract."),(0,a.kt)("h4",{id:"implicit-arguments"},"Implicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \n")),(0,a.kt)("h4",{id:"explicit-arguments"},"Explicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"owner (felt): The address of the owner of the contract.  \nnative_token_address_: The ERC20 contract used to emulate ETH.  \ncontract_account_class_hash_: The clash hash of the contract account.  \nexternally_owned_account_class_hash_: The externally owned account class hash.  \naccount_proxy_class_hash_: The account proxy class hash.  \n")),(0,a.kt)("h3",{id:"execute"},(0,a.kt)("inlineCode",{parentName:"h3"},"execute")),(0,a.kt)("p",null,"Run the given bytecode with the given calldata and parameters"),(0,a.kt)("h4",{id:"implicit-arguments-1"},"Implicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \nbitwise_ptr (BitwiseBuiltin*)  \n")),(0,a.kt)("h4",{id:"explicit-arguments-1"},"Explicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"starknet_contract_address (felt): The starknet contract address of the called contract  \nevm_contract_address (felt): The corresponding EVM contract address of the called contract  \nbytecode_len (felt): The length of the bytecode  \nbytecode (felt*): The bytecode run  \ncalldata_len (felt): The length of the calldata  \ncalldata (felt*): The calldata of the execution  \nvalue (felt): The value of the execution  \ngas_limit (felt): The gas limit of the execution  \ngas_price (felt): The gas price for the execution  \n")),(0,a.kt)("h4",{id:"returns"},"Returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"stack_accesses_len (felt)  \nstack_accesses (felt*)  \nstack_len (felt)  \nmemory_accesses_len (felt)  \nmemory_accesses (felt*)  \nmemory_bytes_len (felt)  \nstarknet_contract_address (felt)  \nevm_contract_address (felt)  \nreturn_data_len (felt)  \nreturn_data (felt*)  \ngas_used (felt)  \n")),(0,a.kt)("h3",{id:"set_blockhash_registry"},(0,a.kt)("inlineCode",{parentName:"h3"},"set_blockhash_registry")),(0,a.kt)("p",null,"The Blockhash registry is used by the BLOCKHASH opcode"),(0,a.kt)("h4",{id:"implicit-arguments-2"},"Implicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \n")),(0,a.kt)("h4",{id:"explicit-arguments-2"},"Explicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"blockhash_registry_address_ (felt): The address of the new blockhash registry contract.  \n")),(0,a.kt)("h3",{id:"get_blockhash_registry"},(0,a.kt)("inlineCode",{parentName:"h3"},"get_blockhash_registry")),(0,a.kt)("p",null,"The Blockhash registry is used by the BLOCKHASH opcode"),(0,a.kt)("h4",{id:"implicit-arguments-3"},"Implicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \n")),(0,a.kt)("h4",{id:"returns-1"},"Returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"address (felt): The address of the current blockhash registry contract.  \n")),(0,a.kt)("h3",{id:"set_native_token"},(0,a.kt)("inlineCode",{parentName:"h3"},"set_native_token")),(0,a.kt)("p",null,"Set the native Starknet ERC20 token used by kakarot."),(0,a.kt)("h4",{id:"implicit-arguments-4"},"Implicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \n")),(0,a.kt)("h4",{id:"explicit-arguments-3"},"Explicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"native_token_address_ (felt): The address of the native token.  \n")),(0,a.kt)("h3",{id:"get_native_token"},(0,a.kt)("inlineCode",{parentName:"h3"},"get_native_token")),(0,a.kt)("p",null,"Get the native token address"),(0,a.kt)("h4",{id:"implicit-arguments-5"},"Implicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \n")),(0,a.kt)("h4",{id:"returns-2"},"Returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"native_token_address (felt): The address of the native token  \n")),(0,a.kt)("h3",{id:"transfer"},(0,a.kt)("inlineCode",{parentName:"h3"},"transfer")),(0,a.kt)("p",null,'Transfer "value" native tokens to "to"'),(0,a.kt)("h4",{id:"implicit-arguments-6"},"Implicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \n")),(0,a.kt)("h4",{id:"explicit-arguments-4"},"Explicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"to_ (felt): The address the transaction is directed to.  \nvalue (felt): Integer of the value sent with this transaction  \n")),(0,a.kt)("h4",{id:"returns-3"},"Returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"success (felt): Boolean to indicate success or failure of transfer  \n")),(0,a.kt)("h3",{id:"deploy_contract_account"},(0,a.kt)("inlineCode",{parentName:"h3"},"deploy_contract_account")),(0,a.kt)("p",null,"Deploy contract account."),(0,a.kt)("h4",{id:"implicit-arguments-7"},"Implicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \nbitwise_ptr (BitwiseBuiltin*)  \n")),(0,a.kt)("h4",{id:"explicit-arguments-5"},"Explicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"bytecode_len (felt): The deploy bytecode length.  \nbytecode (felt*): The deploy bytecode.  \n")),(0,a.kt)("h4",{id:"returns-4"},"Returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"starknet_contract_address (felt): The newly deployed starknet contract address.  \nevm_contract_address (felt): The evm address that is mapped to the newly deployed starknet contract address.  \n")),(0,a.kt)("h3",{id:"deploy_externally_owned_account"},(0,a.kt)("inlineCode",{parentName:"h3"},"deploy_externally_owned_account")),(0,a.kt)("p",null,"Deploy a new externally owned account."),(0,a.kt)("h4",{id:"implicit-arguments-8"},"Implicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \nbitwise_ptr (BitwiseBuiltin*)  \n")),(0,a.kt)("h4",{id:"explicit-arguments-6"},"Explicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"evm_contract_address (felt): The evm address that is mapped to the newly deployed starknet contract address.  \n")),(0,a.kt)("h4",{id:"returns-5"},"Returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"starknet_contract_address (felt): The newly deployed starknet contract address.  \n")),(0,a.kt)("h3",{id:"eth_call"},(0,a.kt)("inlineCode",{parentName:"h3"},"eth_call")),(0,a.kt)("p",null,"The eth_call function as described in the RPC spec, see ",(0,a.kt)("a",{parentName:"p",href:"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call"},"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call")),(0,a.kt)("h4",{id:"implicit-arguments-9"},"Implicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \nbitwise_ptr (BitwiseBuiltin*)  \n")),(0,a.kt)("h4",{id:"explicit-arguments-7"},"Explicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"to (felt): The address the transaction is directed to.  \ngas_limit (felt): Integer of the gas provided for the transaction execution  \ngas_price (felt): Integer of the gas price used for each paid gas  \nvalue (felt): Integer of the value sent with this transaction  \ndata_len (felt): The length of the data  \ndata (felt*): Hash of the method signature and encoded parameters. For details see Ethereum Contract ABI in the Solidity documentation  \n")),(0,a.kt)("h4",{id:"returns-6"},"Returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"return_data_len (felt): The length of the returned bytes  \nreturn_data (felt*): The returned bytes array  \n")),(0,a.kt)("h3",{id:"assert_caller_is_kakarot_account"},(0,a.kt)("inlineCode",{parentName:"h3"},"assert_caller_is_kakarot_account")),(0,a.kt)("p",null,"Assert that the calling contract is a Kakarot account, ie. that it has been\ndeployed by kakarot. This is currently required to make sure that evm and\nstarknet addresses remain consistents along an execution"),(0,a.kt)("h4",{id:"implicit-arguments-10"},"Implicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \nbitwise_ptr (BitwiseBuiltin*)  \n")),(0,a.kt)("h3",{id:"eth_send_transaction"},(0,a.kt)("inlineCode",{parentName:"h3"},"eth_send_transaction")),(0,a.kt)("p",null,"The eth_send_transaction function as described in the RPC spec,\nsee ",(0,a.kt)("a",{parentName:"p",href:"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction"},"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction")),(0,a.kt)("h4",{id:"implicit-arguments-11"},"Implicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \nbitwise_ptr (BitwiseBuiltin*)  \n")),(0,a.kt)("h4",{id:"explicit-arguments-8"},"Explicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"to (felt): The address the transaction is directed to.  \ngas_limit (felt): Integer of the gas provided for the transaction execution  \ngas_price (felt): Integer of the gas price used for each paid gas  \nvalue (felt): Integer of the value sent with this transaction  \ndata_len (felt): The length of the data  \ndata (felt*): Hash of the method signature and encoded parameters. For details see Ethereum Contract ABI in the Solidity documentation  \n")),(0,a.kt)("h4",{id:"returns-7"},"Returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"return_data_len (felt): The length of the returned bytes  \nreturn_data (felt*): The returned bytes array  \n")))}p.isMDXComponent=!0}}]);