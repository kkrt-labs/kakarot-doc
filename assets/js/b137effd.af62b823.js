"use strict";(self.webpackChunkkakarot=self.webpackChunkkakarot||[]).push([[332],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),m=i,f=c["".concat(o,".").concat(m)]||c[m]||d[m]||l;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,a=new Array(l);a[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:i,a[1]=s;for(var u=2;u<l;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3065:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const l={},a="Blake2f",s={unversionedId:"Kakarot/Precompiles/blake2f",id:"Kakarot/Precompiles/blake2f",title:"Blake2f",description:"Internal",source:"@site/docs/Kakarot/Precompiles/blake2f.md",sourceDirName:"Kakarot/Precompiles",slug:"/Kakarot/Precompiles/blake2f",permalink:"/docs/Kakarot/Precompiles/blake2f",draft:!1,editUrl:"https://github.com/sayajin-labs/kakarot/docs/Kakarot/Precompiles/blake2f.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Precompiles",permalink:"/docs/Kakarot/Precompiles/"},next:{title:"Datacopy",permalink:"/docs/Kakarot/Precompiles/datacopy"}},o={},u=[{value:"Internal",id:"internal",level:2},{value:"<code>run</code>",id:"run",level:3},{value:"Implicit arguments",id:"implicit-arguments",level:4},{value:"Explicit arguments",id:"explicit-arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"<code>F</code>",id:"f",level:3},{value:"Implicit arguments",id:"implicit-arguments-1",level:4},{value:"Explicit arguments",id:"explicit-arguments-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<code>blake_rounds</code>",id:"blake_rounds",level:3},{value:"Implicit arguments",id:"implicit-arguments-2",level:4},{value:"Explicit arguments",id:"explicit-arguments-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"<code>blake_round</code>",id:"blake_round",level:3},{value:"Implicit arguments",id:"implicit-arguments-3",level:4},{value:"Explicit arguments",id:"explicit-arguments-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"<code>mix_one</code>",id:"mix_one",level:3},{value:"Implicit arguments",id:"implicit-arguments-4",level:4},{value:"Explicit arguments",id:"explicit-arguments-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"<code>mix_two</code>",id:"mix_two",level:3},{value:"Implicit arguments",id:"implicit-arguments-5",level:4},{value:"Explicit arguments",id:"explicit-arguments-5",level:4},{value:"Returns",id:"returns-5",level:4}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"blake2f"},"Blake2f"),(0,i.kt)("h2",{id:"internal"},"Internal"),(0,i.kt)("h3",{id:"run"},(0,i.kt)("inlineCode",{parentName:"h3"},"run")),(0,i.kt)("p",null,"Run the precompile."),(0,i.kt)("h4",{id:"implicit-arguments"},"Implicit arguments"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \nbitwise_ptr (BitwiseBuiltin*)  \n")),(0,i.kt)("h4",{id:"explicit-arguments"},"Explicit arguments"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"_address (felt)  \ninput_len (felt): The length of input array.  \ninput (felt*): The input array.  \n")),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"output_len (felt): The output length.  \noutput (felt*): The output array.  \ngas_used (felt): The gas usage of precompile.  \n")),(0,i.kt)("h3",{id:"f"},(0,i.kt)("inlineCode",{parentName:"h3"},"F")),(0,i.kt)("p",null,"Perform the blake2b compression function."),(0,i.kt)("h4",{id:"implicit-arguments-1"},"Implicit arguments"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \nbitwise_ptr (BitwiseBuiltin*)  \n")),(0,i.kt)("h4",{id:"explicit-arguments-1"},"Explicit arguments"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"rounds (felt): The number of rounds for the compression function.  \nh (felt*): The internal state of the hash.  \nm (felt*): The sixteen words of a single message.  \nt0 (felt)  \nt1 (felt)  \nf (felt): The flag indicating the last block.  \n")),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"output (felt*): The final state of the compression.  \n")),(0,i.kt)("h3",{id:"blake_rounds"},(0,i.kt)("inlineCode",{parentName:"h3"},"blake_rounds")),(0,i.kt)("p",null,"Perform all blake2b compression function rounds."),(0,i.kt)("h4",{id:"implicit-arguments-2"},"Implicit arguments"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \nbitwise_ptr (BitwiseBuiltin*)  \n")),(0,i.kt)("h4",{id:"explicit-arguments-2"},"Explicit arguments"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"rounds (felt): The number of rounds for the compression function.  \ni (felt): The current round.  \nh (felt*): The internal state of the hash.  \nm (felt*): The sixteen words of a single message.  \nsigma (felt*): The message schedule.  \n")),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"final_h (felt*): The final hash.  \n")),(0,i.kt)("h3",{id:"blake_round"},(0,i.kt)("inlineCode",{parentName:"h3"},"blake_round")),(0,i.kt)("p",null,"Perform a single round of the blake2b compression function."),(0,i.kt)("h4",{id:"implicit-arguments-3"},"Implicit arguments"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \nbitwise_ptr (BitwiseBuiltin*)  \n")),(0,i.kt)("h4",{id:"explicit-arguments-3"},"Explicit arguments"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"state (felt*): The internal state of the hash.  \nmessage (felt*): The sixteen words of a single message.  \nsigma (felt*): The message schedule.  \n")),(0,i.kt)("h4",{id:"returns-3"},"Returns"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"new_state (felt*): The new state of the compression function.  \n")),(0,i.kt)("h3",{id:"mix_one"},(0,i.kt)("inlineCode",{parentName:"h3"},"mix_one")),(0,i.kt)("p",null,"Perform a mixing of inputs."),(0,i.kt)("h4",{id:"implicit-arguments-4"},"Implicit arguments"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \nbitwise_ptr (BitwiseBuiltin*)  \n")),(0,i.kt)("h4",{id:"explicit-arguments-4"},"Explicit arguments"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"a (felt): The first state word.  \nb (felt): The second state word.  \nc (felt): The third state word.  \nd (felt): The fourth state word.  \nm (felt): The message word used in mixing.  \n")),(0,i.kt)("h4",{id:"returns-4"},"Returns"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"a (felt): The new first state word.  \nb (felt): The new second state word.  \nc (felt): The new third state word.  \nd (felt): The new fourth state word.  \n")),(0,i.kt)("h3",{id:"mix_two"},(0,i.kt)("inlineCode",{parentName:"h3"},"mix_two")),(0,i.kt)("p",null,"Perform a mixing of inputs."),(0,i.kt)("h4",{id:"implicit-arguments-5"},"Implicit arguments"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nrange_check_ptr  \nbitwise_ptr (BitwiseBuiltin*)  \n")),(0,i.kt)("h4",{id:"explicit-arguments-5"},"Explicit arguments"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"a (felt): The first state word.  \nb (felt): The second state word.  \nc (felt): The third state word.  \nd (felt): The fourth state word.  \nm (felt): The message word used in mixing.  \n")),(0,i.kt)("h4",{id:"returns-5"},"Returns"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"a (felt): The new first state word.  \nb (felt): The new second state word.  \nc (felt): The new third state word.  \nd (felt): The new fourth state word.  \n")))}c.isMDXComponent=!0}}]);