"use strict";(self.webpackChunkkakarot=self.webpackChunkkakarot||[]).push([[332],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||l;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3065:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const l={},o="Blake2f",i={unversionedId:"Kakarot/Precompiles/blake2f",id:"Kakarot/Precompiles/blake2f",title:"Blake2f",description:"Internal",source:"@site/docs/Kakarot/Precompiles/blake2f.md",sourceDirName:"Kakarot/Precompiles",slug:"/Kakarot/Precompiles/blake2f",permalink:"/kakarot-doc/docs/Kakarot/Precompiles/blake2f",draft:!1,editUrl:"https://github.com/sayajin-labs/kakarot/docs/Kakarot/Precompiles/blake2f.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Precompiles",permalink:"/kakarot-doc/docs/Kakarot/Precompiles/"},next:{title:"Datacopy",permalink:"/kakarot-doc/docs/Kakarot/Precompiles/datacopy"}},s={},u=[{value:"Internal",id:"internal",level:2},{value:"<code>run</code>",id:"run",level:3},{value:"Explicit arguments",id:"explicit-arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"<code>F</code>",id:"f",level:3},{value:"Explicit arguments",id:"explicit-arguments-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<code>blake_rounds</code>",id:"blake_rounds",level:3},{value:"Explicit arguments",id:"explicit-arguments-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"<code>blake_round</code>",id:"blake_round",level:3},{value:"Explicit arguments",id:"explicit-arguments-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"<code>mix_one</code>",id:"mix_one",level:3},{value:"Explicit arguments",id:"explicit-arguments-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"<code>mix_two</code>",id:"mix_two",level:3},{value:"Explicit arguments",id:"explicit-arguments-5",level:4},{value:"Returns",id:"returns-5",level:4}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"blake2f"},"Blake2f"),(0,a.kt)("h2",{id:"internal"},"Internal"),(0,a.kt)("h3",{id:"run"},(0,a.kt)("inlineCode",{parentName:"h3"},"run")),(0,a.kt)("p",null,"Run the precompile."),(0,a.kt)("h4",{id:"explicit-arguments"},"Explicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"_address (felt)  \ninput_len (felt): The length of input array.  \ninput (felt*): The input array.  \n")),(0,a.kt)("h4",{id:"returns"},"Returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"output_len (felt)  \noutput (felt*)  \ngas_used (felt)  \n")),(0,a.kt)("h3",{id:"f"},(0,a.kt)("inlineCode",{parentName:"h3"},"F")),(0,a.kt)("p",null,"Performs the blake2b compression function"),(0,a.kt)("h4",{id:"explicit-arguments-1"},"Explicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"rounds (felt): The number of rounds for the compression function  \nh (felt*): The internal state of the hash  \nm (felt*): The sixteen words of a single message  \nt0 (felt)  \nt1 (felt)  \nf (felt): The flag indicating the last block  \n")),(0,a.kt)("h4",{id:"returns-1"},"Returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"output (felt*): The final state of the compression  \n")),(0,a.kt)("h3",{id:"blake_rounds"},(0,a.kt)("inlineCode",{parentName:"h3"},"blake_rounds")),(0,a.kt)("p",null,"Performs all blake2b compression function rounds"),(0,a.kt)("h4",{id:"explicit-arguments-2"},"Explicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"rounds (felt): The number of rounds for the compression function  \ni (felt): The current round  \nh (felt*): The internal state of the hash  \nm (felt*): The sixteen words of a single message  \nsigma (felt*): The message schedule  \n")),(0,a.kt)("h4",{id:"returns-2"},"Returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"final_h (felt*)  \n")),(0,a.kt)("h3",{id:"blake_round"},(0,a.kt)("inlineCode",{parentName:"h3"},"blake_round")),(0,a.kt)("p",null,"Performs a single round of the blake2b compression function"),(0,a.kt)("h4",{id:"explicit-arguments-3"},"Explicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"state (felt*): The internal state of the hash  \nmessage (felt*): The sixteen words of a single message  \nsigma (felt*): The message schedule  \n")),(0,a.kt)("h4",{id:"returns-3"},"Returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"new_state (felt*): The new state of the compression function  \n")),(0,a.kt)("h3",{id:"mix_one"},(0,a.kt)("inlineCode",{parentName:"h3"},"mix_one")),(0,a.kt)("p",null,"Performs a mixing of inputs"),(0,a.kt)("h4",{id:"explicit-arguments-4"},"Explicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"a (felt): The first state word  \nb (felt): The second state word  \nc (felt): The third state word  \nd (felt): The fourth state word  \nm (felt): The message word used in mixing  \n")),(0,a.kt)("h4",{id:"returns-4"},"Returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"a (felt): The new first state word  \nb (felt): The new second state word  \nc (felt): The new third state word  \nd (felt): The new fourth state word  \n")),(0,a.kt)("h3",{id:"mix_two"},(0,a.kt)("inlineCode",{parentName:"h3"},"mix_two")),(0,a.kt)("p",null,"Performs a mixing of inputs"),(0,a.kt)("h4",{id:"explicit-arguments-5"},"Explicit arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"a (felt): The first state word  \nb (felt): The second state word  \nc (felt): The third state word  \nd (felt): The fourth state word  \nm (felt): The message word used in mixing  \n")),(0,a.kt)("h4",{id:"returns-5"},"Returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"a (felt): The new first state word  \nb (felt): The new second state word  \nc (felt): The new third state word  \nd (felt): The new fourth state word  \n")))}p.isMDXComponent=!0}}]);