"use strict";(self.webpackChunkkakarot=self.webpackChunkkakarot||[]).push([[838],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(n),m=l,g=u["".concat(o,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(g,i(i({ref:t},s),{},{components:n})):r.createElement(g,i({ref:t},s))}));function g(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=m;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[u]="string"==typeof e?e:l,i[1]=p;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6192:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var r=n(7462),l=(n(7294),n(3905));const a={},i="Rlp",p={unversionedId:"utils/rlp",id:"utils/rlp",title:"Rlp",description:"Internal",source:"@site/docs/utils/rlp.md",sourceDirName:"utils",slug:"/utils/rlp",permalink:"/kinto-un/docs/utils/rlp",draft:!1,editUrl:"https://github.com/sayajin-labs/kakarot/docs/utils/rlp.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Alt bn128 g1",permalink:"/kinto-un/docs/utils/alt_bn128/alt_bn128_g1"}},o={},c=[{value:"Internal",id:"internal",level:2},{value:"<code>decode_rlp</code>",id:"decode_rlp",level:3},{value:"Implicit arguments",id:"implicit-arguments",level:4},{value:"Explicit arguments",id:"explicit-arguments",level:4},{value:"<code>encode_rlp_list</code>",id:"encode_rlp_list",level:3},{value:"Implicit arguments",id:"implicit-arguments-1",level:4},{value:"Explicit arguments",id:"explicit-arguments-1",level:4},{value:"Returns",id:"returns",level:4},{value:"<code>encode_felt</code>",id:"encode_felt",level:3},{value:"Implicit arguments",id:"implicit-arguments-2",level:4},{value:"Explicit arguments",id:"explicit-arguments-2",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<code>encode_byte_array</code>",id:"encode_byte_array",level:3},{value:"Implicit arguments",id:"implicit-arguments-3",level:4},{value:"Explicit arguments",id:"explicit-arguments-3",level:4},{value:"Returns",id:"returns-2",level:4}],s={toc:c};function u(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"rlp"},"Rlp"),(0,l.kt)("h2",{id:"internal"},"Internal"),(0,l.kt)("h3",{id:"decode_rlp"},(0,l.kt)("inlineCode",{parentName:"h3"},"decode_rlp")),(0,l.kt)("p",null,"decodes RLP data see this: ",(0,l.kt)("a",{parentName:"p",href:"https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp"},"https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp")),(0,l.kt)("h4",{id:"implicit-arguments"},"Implicit arguments"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nbitwise_ptr (BitwiseBuiltin*)  \nrange_check_ptr  \n")),(0,l.kt)("h4",{id:"explicit-arguments"},"Explicit arguments"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"data_len (felt): The lenght of the bytes  \ndata (felt*): The pointer to the first byte in array  \nitems (Item*): A pointer to an empty array of items, will be filled with found items  \n")),(0,l.kt)("h3",{id:"encode_rlp_list"},(0,l.kt)("inlineCode",{parentName:"h3"},"encode_rlp_list")),(0,l.kt)("p",null,"encodes data into an rlp list"),(0,l.kt)("h4",{id:"implicit-arguments-1"},"Implicit arguments"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nbitwise_ptr (BitwiseBuiltin*)  \nrange_check_ptr  \n")),(0,l.kt)("h4",{id:"explicit-arguments-1"},"Explicit arguments"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"data_len (felt): The lenght of the bytes to copy from  \ndata (felt*): The pointer to the first byte in the array to copy from  \nrlp (felt*): The pointer receiving the rlp encoded list  \n")),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"rlp_len (felt)  \n")),(0,l.kt)("h3",{id:"encode_felt"},(0,l.kt)("inlineCode",{parentName:"h3"},"encode_felt")),(0,l.kt)("p",null,"encodes felt into an rlp item"),(0,l.kt)("h4",{id:"implicit-arguments-2"},"Implicit arguments"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nbitwise_ptr (BitwiseBuiltin*)  \nrange_check_ptr  \n")),(0,l.kt)("h4",{id:"explicit-arguments-2"},"Explicit arguments"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"item (felt): The felt that is encoded into rlp  \nrlp_len (felt): The length of the rlp array  \nrlp (felt*): The pointer receiving the rlp encoded felt  \n")),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"rlp_len (felt)  \n")),(0,l.kt)("h3",{id:"encode_byte_array"},(0,l.kt)("inlineCode",{parentName:"h3"},"encode_byte_array")),(0,l.kt)("p",null,"encodes byte array into an rlp element"),(0,l.kt)("h4",{id:"implicit-arguments-3"},"Implicit arguments"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"syscall_ptr (felt*)  \npedersen_ptr (HashBuiltin*)  \nbitwise_ptr (BitwiseBuiltin*)  \nrange_check_ptr  \n")),(0,l.kt)("h4",{id:"explicit-arguments-3"},"Explicit arguments"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"byte_array_len: The length of the bytes to copy from  \nbyte_array (felt*): The pointer to the first byte in the array to copy from  \nrlp_len (felt)  \nrlp (felt*): The pointer receiving the rlp encoded list  \n")),(0,l.kt)("h4",{id:"returns-2"},"Returns"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"rlp_len (felt)  \n")))}u.isMDXComponent=!0}}]);